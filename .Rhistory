if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biocLite")
BiocManager::install()
biocLite(c("Rgraphviz", "png", "KEGGgraph", "org.Hs.eg.db"))
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.18")
biocLite(c("Rgraphviz", "png", "KEGGgraph", "org.Hs.eg.db"))
BiocManager::install("biocLite")
biocLite(c("Rgraphviz", "png", "KEGGgraph", "org.Hs.eg.db"))
BiocManager::install(version = "3.18")
install.packages("pathview",repos="http://R-Forge.R-project.org")
library(pathview)
BiocManager::install("pathview")
library(pathview)
data(gse16873.d)
pv.out <- pathview(gene.data = gse16873.d[, 1], pathway.id = "04110", species = "hsa", out.suffix = "gse16873")
help(pathview)
View(gse16873.d)
View(gse16873.d)
pv.out <- pathview(gene.data = gse16873.d[, 1], pathway.id = "04110", species = "hsa", out.suffix = "gse16873")
pv.out <- pathview(gene.data = gse16873.d[, 1], pathway.id = "04110", species = "hsa", out.suffix = "gse16873")
write.table(gse16873.d, file="pathway1", sep="\t")
file = read.table("pathway1", sep="\t")
View(file)
pv.out <- pathview(gene.data = file[, 1], pathway.id = "01100", species = "hsa", out.suffix = "gse16873")
pv.out <- pathview(gene.data = file[, 1], pathway.id = "00640", species = "hsa", out.suffix = "gse16873")
pv.out <- pathview(gene.data = gse16873.d[, 1], pathway.id = "00640", species = "hsa", out.suffix = "gse16873")
pv.out <- pathview(gene.data = gse16873.d[, 1], pathway.id = "00640", species = "hsa", out.suffix = "gsedata")
pv.out <- pathview(gene.data = file[, 1], pathway.id = "00640", species = "hsa", out.suffix = "downloadData")
filem = as.matrix(file)
View(filem)
pv.out <- pathview(gene.data = filem[, 1], pathway.id = "00640", species = "hsa", out.suffix = "downloadData")
View(file)
setwd("C:/wamp/www/candres/")
library(tidyr)
library(dplyr)
library(stringr)
library(trackViewer)
library(RColorBrewer)
# Define input values directly
num_domains <- 11
mutation_file_path <- "transformed_data.txt" # Path to mutation file
separator <- "," # Separator for CSV
sps <- "C.albicans"
# Define default plot settings
x_label <- ""
y_label <- "y-axis"
plot_title <- ""
title_height <- 0.1
shrink <- FALSE
# Domain definitions
if(sps == 'C.albicans'){
domain_locs <- c(1, 115, 136, 230, 241, 294, 360, 373, 441, 473, 504)
domain_widths <- c(36, 11, 13, 4, 26, 31, 12, 5, 30, 17, 10)
domain_names <- c("TMD", "Helix B", "Helix C", "Helix F", "Helix G", "Helix I", "Helix K", "Interior loop", "FSL", "Helix L", "SEC-PPEC")
seq_length <- 528
} else{
domain_locs <- c(1, 124, 145, 239, 250, 302, 365, 378, 445, 475, 508)
domain_widths <- c(43, 11, 9, 4, 26, 31, 12, 5, 28, 17, 10)
domain_names <- c("TMD", "Helix B", "Helix C", "Helix F", "Helix G", "Helix I", "Helix K", "Interior loop", "FSL", "Helix L", "SEC-PPEC")
seq_length <- 533
}
# Load the mutation data
mutation_list <- read.csv(mutation_file_path, sep = separator)
mutation_list <- na.omit(mutation_list) %>% mutate(across(where(is.character), str_trim))
mutation_list <- mutation_list[!duplicated(mutation_list), ]
# Get default drug colors
drug_list <- unique(mutation_list$Resistance)
drug_colors <- data.frame(
drug = drug_list,
color = if (length(drug_list) > 12) {
colorRampPalette(brewer.pal(12, "Paired"))(length(drug_list))
} else {
brewer.pal(min(12, length(drug_list)), "Paired")[1:length(drug_list)]
}
)
# Process mutation data
mutation_names <- separate(mutation_list, "Mutation", into = c("orig", "rest"), sep = "(?<=[A-Za-z])(?=[0-9])", fill = "left")
mutation_names <- separate(mutation_names, "rest", into = c("loc", "new"), sep = "(?<=[0-9])(?=[A-Za-z*])")
# Get mutation shapes and colors
color_pal <- data.frame(drug = drug_list, color = unlist(lapply(drug_list, function(x) drug_colors$color[drug_colors$drug == x])))
mut_colors <- merge(color_pal, mutation_names, by.x = "drug", by.y = "Resistance", all = TRUE)
mut_colors$shape <- "circle"
mut_colors[mut_colors$new == "fs", "shape"] <- "diamond"
mut_colors[mut_colors$new == '*', "shape"] <- "square"
mut_colors[is.na(mut_colors$orig), "shape"] <- "triangle_point_down"
# Handle special cases for in-frame insertions
if (any(is.na(mut_colors$orig))) {
mut_colors[is.na(mut_colors$orig), "loc"] <- strsplit(
mut_colors[is.na(mut_colors$orig), "loc"],
split = '_'
)[[1]][1]
mut_colors[is.na(mut_colors$orig), "orig"] <- ''
}
original_aa <- mut_colors$orig
PM <- mut_colors$loc
replaced_aa <- mut_colors$new
# Domain colors
if (num_domains < 3) {
dom_color <- brewer.pal(3, "Dark2")[1:num_domains]
} else if (num_domains > 8) {
dom_color <- colorRampPalette(brewer.pal(8, "Dark2"))(num_domains)
} else {
dom_color <- brewer.pal(num_domains, "Dark2")
}
# Create the domains
features <- GRanges(
"chr1",
IRanges(c(1, domain_locs), width = c(seq_length, domain_widths), names = c("Cytochrome P450", domain_names)),
fill = c("#FFFFFF", dom_color),
seqlengths = seqlengths(Seqinfo("chr1", c(seq_length)))
)
# Create mutations
mutations <- GRanges(
"chr1",
IRanges(as.integer(PM), width = 1, names = paste0(original_aa, PM, replaced_aa)),
color = mut_colors$color,
shape = mut_colors$shape,
score = runif(length(PM)) * 10
)
# Create legend for drugs
legend <- list(labels = color_pal$drug, fill = color_pal$color)
# Create x-axis with uniform ticks
xaxis <- round(seq(1, round(seq_length, digits = -(length(seq_length) + 1)), length.out = 5))
if ((xaxis[length(xaxis)] - seq_length) < 20) {
xaxis <- c(xaxis[1:(length(xaxis) - 1)], seq_length)
} else {
xaxis <- c(xaxis, seq_length)
}
# Generate the plot
# plot_filename <- "output_plot.pdf"
plot_filename <- "All_ERG11_albicans.pdf"
pdf(plot_filename, width = 14, height = 4)
lolliplot(mutations, features, rescale = FALSE, xaxis = xaxis, yaxis = FALSE, legend = legend, ylab=FALSE, xlab = FALSE)
#grid.text(x_label, x = .5, y = 0, just = "bottom")
#par(mar = c(5, 4, 1, 2), oma = c(0, 0, 0, 0))  # Bottom, Left, Top, Right
#grid.text(plot_title, x = .5, y = title_height, just = "top", gp = gpar(cex = 1.5, fontface = "bold"))
dev.off()
cat("Plot saved to", plot_filename, "\n")
if ((xaxis[length(xaxis)] - seq_length) < 20) {
xaxis <- c(xaxis[1:(length(xaxis) - 1)], seq_length)
} else {
xaxis <- c(xaxis, seq_length)
}
# Generate the plot
# plot_filename <- "output_plot.pdf"
plot_filename <- "All_ERG11_albicans.pdf"
pdf(plot_filename, width = 14, height = 7
lolliplot(mutations, features, rescale = FALSE, xaxis = xaxis, yaxis = FALSE, legend = legend, ylab=FALSE, xlab = FALSE)
# Generate the plot
# plot_filename <- "output_plot.pdf"
plot_filename <- "All_ERG11_albicans.pdf"
pdf(plot_filename, width = 14, height = 7)
lolliplot(mutations, features, rescale = FALSE, xaxis = xaxis, yaxis = FALSE, legend = legend, ylab=FALSE, xlab = FALSE)
#grid.text(x_label, x = .5, y = 0, just = "bottom")
#par(mar = c(5, 4, 1, 2), oma = c(0, 0, 0, 0))  # Bottom, Left, Top, Right
#grid.text(plot_title, x = .5, y = title_height, just = "top", gp = gpar(cex = 1.5, fontface = "bold"))
dev.off()
cat("Plot saved to", plot_filename, "\n")
# Define input values directly
num_domains <- 11
mutation_file_path <- "transformed_data.txt" # Path to mutation file
separator <- "," # Separator for CSV
sps <- "C.glabrata"
# Define default plot settings
x_label <- ""
y_label <- "y-axis"
plot_title <- ""
title_height <- 0.1
shrink <- FALSE
# Domain definitions
if(sps == 'C.albicans'){
domain_locs <- c(1, 115, 136, 230, 241, 294, 360, 373, 441, 473, 504)
domain_widths <- c(36, 11, 13, 4, 26, 31, 12, 5, 30, 17, 10)
domain_names <- c("TMD", "Helix B", "Helix C", "Helix F", "Helix G", "Helix I", "Helix K", "Interior loop", "FSL", "Helix L", "SEC-PPEC")
seq_length <- 528
} else{
domain_locs <- c(1, 124, 145, 239, 250, 302, 365, 378, 445, 475, 508)
domain_widths <- c(43, 11, 9, 4, 26, 31, 12, 5, 28, 17, 10)
domain_names <- c("TMD", "Helix B", "Helix C", "Helix F", "Helix G", "Helix I", "Helix K", "Interior loop", "FSL", "Helix L", "SEC-PPEC")
seq_length <- 533
}
# Load the mutation data
mutation_list <- read.csv(mutation_file_path, sep = separator)
mutation_list <- na.omit(mutation_list) %>% mutate(across(where(is.character), str_trim))
mutation_list <- mutation_list[!duplicated(mutation_list), ]
# Get default drug colors
drug_list <- unique(mutation_list$Resistance)
drug_colors <- data.frame(
drug = drug_list,
color = if (length(drug_list) > 12) {
colorRampPalette(brewer.pal(12, "Paired"))(length(drug_list))
} else {
brewer.pal(min(12, length(drug_list)), "Paired")[1:length(drug_list)]
}
)
# Process mutation data
mutation_names <- separate(mutation_list, "Mutation", into = c("orig", "rest"), sep = "(?<=[A-Za-z])(?=[0-9])", fill = "left")
mutation_names <- separate(mutation_names, "rest", into = c("loc", "new"), sep = "(?<=[0-9])(?=[A-Za-z*])")
# Get mutation shapes and colors
color_pal <- data.frame(drug = drug_list, color = unlist(lapply(drug_list, function(x) drug_colors$color[drug_colors$drug == x])))
mut_colors <- merge(color_pal, mutation_names, by.x = "drug", by.y = "Resistance", all = TRUE)
mut_colors$shape <- "circle"
mut_colors[mut_colors$new == "fs", "shape"] <- "diamond"
mut_colors[mut_colors$new == '*', "shape"] <- "square"
mut_colors[is.na(mut_colors$orig), "shape"] <- "triangle_point_down"
# Handle special cases for in-frame insertions
if (any(is.na(mut_colors$orig))) {
mut_colors[is.na(mut_colors$orig), "loc"] <- strsplit(
mut_colors[is.na(mut_colors$orig), "loc"],
split = '_'
)[[1]][1]
mut_colors[is.na(mut_colors$orig), "orig"] <- ''
}
original_aa <- mut_colors$orig
PM <- mut_colors$loc
replaced_aa <- mut_colors$new
# Domain colors
if (num_domains < 3) {
dom_color <- brewer.pal(3, "Dark2")[1:num_domains]
} else if (num_domains > 8) {
dom_color <- colorRampPalette(brewer.pal(8, "Dark2"))(num_domains)
} else {
dom_color <- brewer.pal(num_domains, "Dark2")
}
# Create the domains
features <- GRanges(
"chr1",
IRanges(c(1, domain_locs), width = c(seq_length, domain_widths), names = c("Cytochrome P450", domain_names)),
fill = c("#FFFFFF", dom_color),
seqlengths = seqlengths(Seqinfo("chr1", c(seq_length)))
)
# Create mutations
mutations <- GRanges(
"chr1",
IRanges(as.integer(PM), width = 1, names = paste0(original_aa, PM, replaced_aa)),
color = mut_colors$color,
shape = mut_colors$shape,
score = runif(length(PM)) * 10
)
# Create legend for drugs
legend <- list(labels = color_pal$drug, fill = color_pal$color)
# Create x-axis with uniform ticks
xaxis <- round(seq(1, round(seq_length, digits = -(length(seq_length) + 1)), length.out = 5))
if ((xaxis[length(xaxis)] - seq_length) < 20) {
xaxis <- c(xaxis[1:(length(xaxis) - 1)], seq_length)
} else {
xaxis <- c(xaxis, seq_length)
}
# Generate the plot
# plot_filename <- "output_plot.pdf"
plot_filename <- "All_ERG11_glabrata.pdf"
pdf(plot_filename, width = 14, height = 5)
lolliplot(mutations, features, rescale = FALSE, xaxis = xaxis, yaxis = FALSE, legend = legend, ylab=FALSE, xlab = FALSE)
#grid.text(x_label, x = .5, y = 0, just = "bottom")
#par(mar = c(5, 4, 1, 2), oma = c(0, 0, 0, 0))  # Bottom, Left, Top, Right
#grid.text(plot_title, x = .5, y = title_height, just = "top", gp = gpar(cex = 1.5, fontface = "bold"))
dev.off()
cat("Plot saved to", plot_filename, "\n")
# Define input values directly
num_domains <- 11
mutation_file_path <- "transformed_data_glabrta.txt" # Path to mutation file
separator <- "," # Separator for CSV
sps <- "C.glabrata"
# Define default plot settings
x_label <- ""
y_label <- "y-axis"
plot_title <- ""
title_height <- 0.1
shrink <- FALSE
# Domain definitions
if(sps == 'C.albicans'){
domain_locs <- c(1, 115, 136, 230, 241, 294, 360, 373, 441, 473, 504)
domain_widths <- c(36, 11, 13, 4, 26, 31, 12, 5, 30, 17, 10)
domain_names <- c("TMD", "Helix B", "Helix C", "Helix F", "Helix G", "Helix I", "Helix K", "Interior loop", "FSL", "Helix L", "SEC-PPEC")
seq_length <- 528
} else{
domain_locs <- c(1, 124, 145, 239, 250, 302, 365, 378, 445, 475, 508)
domain_widths <- c(43, 11, 9, 4, 26, 31, 12, 5, 28, 17, 10)
domain_names <- c("TMD", "Helix B", "Helix C", "Helix F", "Helix G", "Helix I", "Helix K", "Interior loop", "FSL", "Helix L", "SEC-PPEC")
seq_length <- 533
}
# Load the mutation data
mutation_list <- read.csv(mutation_file_path, sep = separator)
# Define input values directly
num_domains <- 11
mutation_file_path <- "transformed_data_glabrata.txt" # Path to mutation file
separator <- "," # Separator for CSV
sps <- "C.glabrata"
# Define default plot settings
x_label <- ""
y_label <- "y-axis"
plot_title <- ""
title_height <- 0.1
shrink <- FALSE
# Domain definitions
if(sps == 'C.albicans'){
domain_locs <- c(1, 115, 136, 230, 241, 294, 360, 373, 441, 473, 504)
domain_widths <- c(36, 11, 13, 4, 26, 31, 12, 5, 30, 17, 10)
domain_names <- c("TMD", "Helix B", "Helix C", "Helix F", "Helix G", "Helix I", "Helix K", "Interior loop", "FSL", "Helix L", "SEC-PPEC")
seq_length <- 528
} else{
domain_locs <- c(1, 124, 145, 239, 250, 302, 365, 378, 445, 475, 508)
domain_widths <- c(43, 11, 9, 4, 26, 31, 12, 5, 28, 17, 10)
domain_names <- c("TMD", "Helix B", "Helix C", "Helix F", "Helix G", "Helix I", "Helix K", "Interior loop", "FSL", "Helix L", "SEC-PPEC")
seq_length <- 533
}
# Load the mutation data
mutation_list <- read.csv(mutation_file_path, sep = separator)
mutation_list <- na.omit(mutation_list) %>% mutate(across(where(is.character), str_trim))
mutation_list <- mutation_list[!duplicated(mutation_list), ]
# Get default drug colors
drug_list <- unique(mutation_list$Resistance)
drug_colors <- data.frame(
drug = drug_list,
color = if (length(drug_list) > 12) {
colorRampPalette(brewer.pal(12, "Paired"))(length(drug_list))
} else {
brewer.pal(min(12, length(drug_list)), "Paired")[1:length(drug_list)]
}
)
# Process mutation data
mutation_names <- separate(mutation_list, "Mutation", into = c("orig", "rest"), sep = "(?<=[A-Za-z])(?=[0-9])", fill = "left")
mutation_names <- separate(mutation_names, "rest", into = c("loc", "new"), sep = "(?<=[0-9])(?=[A-Za-z*])")
# Get mutation shapes and colors
color_pal <- data.frame(drug = drug_list, color = unlist(lapply(drug_list, function(x) drug_colors$color[drug_colors$drug == x])))
mut_colors <- merge(color_pal, mutation_names, by.x = "drug", by.y = "Resistance", all = TRUE)
mut_colors$shape <- "circle"
mut_colors[mut_colors$new == "fs", "shape"] <- "diamond"
mut_colors[mut_colors$new == '*', "shape"] <- "square"
mut_colors[is.na(mut_colors$orig), "shape"] <- "triangle_point_down"
# Handle special cases for in-frame insertions
if (any(is.na(mut_colors$orig))) {
mut_colors[is.na(mut_colors$orig), "loc"] <- strsplit(
mut_colors[is.na(mut_colors$orig), "loc"],
split = '_'
)[[1]][1]
mut_colors[is.na(mut_colors$orig), "orig"] <- ''
}
original_aa <- mut_colors$orig
PM <- mut_colors$loc
replaced_aa <- mut_colors$new
# Domain colors
if (num_domains < 3) {
dom_color <- brewer.pal(3, "Dark2")[1:num_domains]
} else if (num_domains > 8) {
dom_color <- colorRampPalette(brewer.pal(8, "Dark2"))(num_domains)
} else {
dom_color <- brewer.pal(num_domains, "Dark2")
}
# Create the domains
features <- GRanges(
"chr1",
IRanges(c(1, domain_locs), width = c(seq_length, domain_widths), names = c("Cytochrome P450", domain_names)),
fill = c("#FFFFFF", dom_color),
seqlengths = seqlengths(Seqinfo("chr1", c(seq_length)))
)
# Create mutations
mutations <- GRanges(
"chr1",
IRanges(as.integer(PM), width = 1, names = paste0(original_aa, PM, replaced_aa)),
color = mut_colors$color,
shape = mut_colors$shape,
score = runif(length(PM)) * 10
)
# Create legend for drugs
legend <- list(labels = color_pal$drug, fill = color_pal$color)
# Create x-axis with uniform ticks
xaxis <- round(seq(1, round(seq_length, digits = -(length(seq_length) + 1)), length.out = 5))
if ((xaxis[length(xaxis)] - seq_length) < 20) {
xaxis <- c(xaxis[1:(length(xaxis) - 1)], seq_length)
} else {
xaxis <- c(xaxis, seq_length)
}
# Generate the plot
# plot_filename <- "output_plot.pdf"
plot_filename <- "All_ERG11_glabrata.pdf"
pdf(plot_filename, width = 14, height = 5)
lolliplot(mutations, features, rescale = FALSE, xaxis = xaxis, yaxis = FALSE, legend = legend, ylab=FALSE, xlab = FALSE)
#grid.text(x_label, x = .5, y = 0, just = "bottom")
#par(mar = c(5, 4, 1, 2), oma = c(0, 0, 0, 0))  # Bottom, Left, Top, Right
#grid.text(plot_title, x = .5, y = title_height, just = "top", gp = gpar(cex = 1.5, fontface = "bold"))
dev.off()
cat("Plot saved to", plot_filename, "\n")
